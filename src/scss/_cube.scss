@keyframes cube-spin {
  0% {
    transform: rotateY(45deg);
  }

  100% {
    transform: rotateY(405deg);
  }
}

$cube-colors: red, orange, yellow, green, blue, white;

$cube-size-lg: 400px;

$cube-size: 36px;
$cube-square-border-radius: 3px;
$cube-square-border: 1px solid #222;
$cube-square-box-shadow: inset 0 0 1px 1px rgba($dark, 0.25);

$cube-square-border-radius-sm: 2px;
$cube-square-border-sm: 1px solid #222;
$cube-square-box-shadow-sm: inset 0 0 0px 0px rgba($dark, 1);

$cube-square-border-radius-lg: 2px;
$cube-square-border-lg: 2px solid #222;
$cube-square-box-shadow-lg: inset 0 0 0px 0px rgba($dark, 1);

// $cube-square-border-radius-sm-inverted: 2px;
$cube-square-border-sm-inverted: 1px solid $light;

// $cube-square-box-shadow-sm-inverted: inset 0 0 0px 0px rgba($light, 1);

// $cube-square-border-radius-sm-inverted: 2px;
$cube-square-border-sm-inverted: 2px solid $light;

// $cube-square-box-shadow-sm-inverted: inset 0 0 0px 0px rgba($light, 1);

$s-min: 20;
$s-max: 70;
$l-min: 30;
$l-max: 90;

@mixin cube-bg {
  width: $cube-size-lg;
  height: $cube-size-lg;
  perspective: $cube-size-lg * 10;
  perspective-origin: 50% ($cube-size-lg * -3);

  .cube-wrapper {
    padding-top: 20vh;
    width: $cube-size-lg;
    animation: none;

    .side {
      width: $cube-size-lg;
      height: $cube-size-lg;
    }

    .side.back {
      transform: translateZ($cube-size-lg / 2 * -1) rotateY(180deg);
    }

    .side.right {
      transform: rotateY(-270deg) translateX($cube-size-lg / 2);
    }

    .side.left {
      transform: rotateY(270deg) translateX($cube-size-lg / 2 * -1);
    }

    .side.top {
      transform: rotateX(-90deg) translateY($cube-size-lg / 2 * -1);
    }

    .side.bottom {
      transform: rotateX(90deg) translateY($cube-size-lg / 2);
    }

    .side.front {
      transform: translateZ($cube-size-lg / 2);
    }

    .square {
      // subtle shadow around the edge of each square
      box-shadow: $cube-square-box-shadow-lg;
      border: $cube-square-border-lg;
      border-radius: $cube-square-border-radius-lg;
    }
  }
}

.cube-container {
  display: inline-block;
  margin-left: 1.5rem;

  @media (max-width: 900px) {
    // display: none;
    // position: fixed;
    // top: 1.5rem;
    // right: 0;
    position: fixed;
    z-index: 10;
    right: 0;
    bottom: 1.5rem;

    .cube {
      // @include cube-bg();

    }
  }

  @media (max-width: 600px) {
    // display: none;
    // position: fixed;
    // left: 0;
    // top: 0;
    // z-index: -1;
    // .cube {
    //   @include cube-bg();
    // }
  }
}

.cube {
  display: inline-block;
  width: $cube-size * 2;
  height: $cube-size;
  perspective: $cube-size * 10;
  perspective-origin: 50% ($cube-size * -3);

  &.large {
    width: $cube-size-lg;
    height: $cube-size-lg;
    perspective: $cube-size-lg * 10;
    perspective-origin: 50% ($cube-size-lg * -3);
  }
}

// .cube-wrapper {
//   padding-top: $cube-size / 2;
//   position: relative;
//   width: $cube-size;
//   cursor: pointer;
//   transform-style: preserve-3d;
//   animation: cube-spin 10s infinite linear;
// }

html:not(.mobile):not(.tablet) {
  .cube-container:hover {
    .side.back {
      transform: translate(0) rotateX(0deg) rotateY(0deg);
    }

    .side.right {
      transform: translate(0) rotateX(50deg) rotateY(50deg);
    }

    .side.left {
      transform: translate(0) rotateX(20deg) rotateY(10deg);
    }

    .side.top {
      transform: translate(0) rotateX(-45deg) rotateY(25deg);
    }

    .side.bottom {
      transform: translate(0) rotateX(90deg) rotateY(100deg);
    }

    .side.front {
      transform: translateZ(0);
    }
  }
}

.cube-wrapper {
  position: relative;
  width: $cube-size;
  cursor: pointer;
  transform-style: preserve-3d;
  transform: rotateY(45deg);
  animation: cube-spin 10s infinite linear;

  .side {
    position: absolute;
    width: $cube-size;
    height: $cube-size;
    background: transparent;

    @include transition(background $transition-default, transform $transition-slow);

    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr;
  }

  .square {
    border: $cube-square-border-sm;
    border-radius: $cube-square-border-radius-sm;

    // subtle shadow around the edge of each square -- trying to make it look a little 3d
    box-shadow: $cube-square-box-shadow-sm;

    @include transition(background $transition-normal, border-color $transition-normal);
  }

  .side.back {
    transform: translateZ($cube-size / 2 * -1) rotateY(180deg);

    &.after {
      transform: rotateY(180deg);
    }

    .square {
      background: transparent;
    }
  }

  .side.right {
    transform: rotateY(-270deg) translateX($cube-size / 2);
    transform-origin: top right;

    &.after {
      transform: rotateY(-270deg);
    }

    .square {
      background: transparent;
    }
  }

  .side.left {
    transform: rotateY(270deg) translateX($cube-size / 2 * -1);
    transform-origin: center left;

    &.after {
      transform: rotateY(270deg);
    }

    .square {
      background: transparent;
    }
  }

  .side.top {
    transform: rotateX(-90deg) translateY($cube-size / 2 * -1);
    transform-origin: top center;

    &.after {
      transform: rotateX(-90deg);
    }

    .square {
      background: transparent;
    }
  }

  .side.bottom {
    transform: rotateX(90deg) translateY($cube-size / 2);
    transform-origin: bottom center;

    &.after {
      transform: rotateX(90deg);
    }

    .square {
      background: transparent;
    }
  }

  .side.front {
    transform: translateZ($cube-size / 2);

    &.after {
      transform: translateZ(0);
    }

    .square {
      background: transparent;
    }
  }
}

.cube-wrapper.colors {
  .side {
    background: $dark;
  }

  .side.back {
    transform: translateZ($cube-size / 2 * -1) rotateY(180deg);

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }

  .side.right {
    transform: rotateY(-270deg) translateX($cube-size / 2);
    transform-origin: top right;

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }

  .side.left {
    transform: rotateY(270deg) translateX($cube-size / 2 * -1);
    transform-origin: center left;

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }

  .side.top {
    transform: rotateX(-90deg) translateY($cube-size / 2 * -1);
    transform-origin: top center;

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }

  .side.bottom {
    transform: rotateX(90deg) translateY($cube-size / 2);
    transform-origin: bottom center;

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }

  .side.front {
    transform: translateZ($cube-size / 2);

    .square {
      @for $i from 1 through 9 {
        &:nth-child(#{$i}) {
          background: nth($cube-colors, random(length($cube-colors)));
        }
      }
    }
  }
}

.cube-wrapper.large {
  padding-top: 20vh;
  width: $cube-size-lg;

  .side {
    width: $cube-size-lg;
    height: $cube-size-lg;
  }

  .side.back {
    transform: translateZ($cube-size-lg / 2 * -1) rotateY(180deg);
  }

  .side.right {
    transform: rotateY(-270deg) translateX($cube-size-lg / 2);
  }

  .side.left {
    transform: rotateY(270deg) translateX($cube-size-lg / 2 * -1);
  }

  .side.top {
    transform: rotateX(-90deg) translateY($cube-size-lg / 2 * -1);
  }

  .side.bottom {
    transform: rotateX(90deg) translateY($cube-size-lg / 2);
  }

  .side.front {
    transform: translateZ($cube-size-lg / 2);
  }

  .square {
    // subtle shadow around the edge of each square
    box-shadow: $cube-square-box-shadow-lg;
    border: $cube-square-border-lg;
    border-radius: $cube-square-border-radius-lg;
  }
}