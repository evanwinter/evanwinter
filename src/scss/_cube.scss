@keyframes cube-spin {
	0% {
		transform: rotateY(45deg);
	}

	100% {
		transform: rotateY(405deg);
	}
}

@mixin cube-bg {
	width: var(--cube-size-lg);
	height: var(--cube-size-lg);
	perspective: calc(var(--cube-size-lg) * 10);
	perspective-origin: 50% calc(var(--cube-size-lg) * -3);

	.cube-wrapper {
		padding-top: 20vh;
		width: var(--cube-size-lg);
		animation: none;

		.side {
			width: var(--cube-size-lg);
			height: var(--cube-size-lg);
		}

		.side.back {
			transform: translateZ(var(--cube-size-lg) / 2 * -1) rotateY(180deg);
		}

		.side.right {
			transform: rotateY(-270deg) translateX(var(--cube-size-lg) / 2);
		}

		.side.left {
			transform: rotateY(270deg) translateX(var(--cube-size-lg) / 2 * -1);
		}

		.side.top {
			transform: rotateX(-90deg) translateY(var(--cube-size-lg) / 2 * -1);
		}

		.side.bottom {
			transform: rotateX(90deg) translateY(var(--cube-size-lg) / 2);
		}

		.side.front {
			transform: translateZ(var(--cube-size-lg) / 2);
		}

		.square {
			// subtle shadow around the edge of each square
			box-shadow: var(--cube-square-box-shadow-lg);
			border: var(--cube-square-border-lg);
			border-radius: var(--cube-square-border-radius-lg);
		}
	}
}

@mixin deform-on-hover {
	.side.back {
		transform: var(--back-skew);
	}

	.side.right {
		transform: var(--right-skew);
	}

	.side.left {
		transform: var(--left-skew);
	}

	.side.top {
		transform: var(--top-skew);
	}

	.side.bottom {
		transform: var(--bottom-skew);
	}

	.side.front {
		transform: var(--front-skew);
	}
}

.cube-container {
	// display: inline-block;
	// margin-left: 1.5rem;
	position: fixed;
	z-index: 10;
	right: 0;
	bottom: 1.5rem;

	&:hover {
		@include deform-on-hover;
	}

	@media (max-width: 900px) {
		display: none;

		// display: none;
		// position: fixed;
		// top: 1.5rem;
		// right: 0;
		// position: fixed;
		// z-index: 10;
		// right: 1.5rem;
		// bottom: 1.5rem;

		// .cube {
		//   @include cube-bg();
		// }
	}

	@media (max-width: 600px) {
		// display: none;
		// position: absolute;
		// top: 0;
		// left: 0;
		// top: 0;
		// z-index: -1;
		// .cube {
		//   @include cube-bg();
		// }
	}
}

.cube {
	display: inline-block;
	width: calc(var(--cube-size) * 2);
	height: var(--cube-size);
	perspective: calc(var(--cube-size) * 10);
	perspective-origin: 50% calc(var(--cube-size) * -3);

	&.large {
		width: var(--cube-size-lg);
		height: var(--cube-size-lg);
		perspective: calc(var(--cube-size-lg) * 10);
		perspective-origin: 50% calc(var(--cube-size-lg) * -3);
	}
}

// .cube-wrapper {
//   padding-top: var(--cube-size) / 2;
//   position: relative;
//   width: var(--cube-size);
//   cursor: pointer;
//   transform-style: preserve-3d;
//   animation: cube-spin 10s infinite linear;
// }

.cube-wrapper {
	position: relative;
	width: var(--cube-size);
	cursor: pointer;
	transform-style: preserve-3d;
	transform: rotateY(45deg);
	animation: cube-spin 10s infinite linear;

	.side {
		position: absolute;
		width: var(--cube-size);
		height: var(--cube-size);
		background: transparent;

		@include transition(
			background var(--transition-default),
			transform var(--transition-slow)
		);

		display: grid;
		grid-template-columns: 1fr 1fr 1fr;
		grid-template-rows: 1fr 1fr 1fr;
	}

	.square {
		border: var(--cube-square-border-sm);
		border-radius: var(--cube-square-border-radius-sm);

		// subtle shadow around the edge of each square -- trying to make it look a little 3d
		box-shadow: var(--cube-square-box-shadow-sm);

		@include transition(
			background var(--transition-normal),
			border-color var(--transition-normal)
		);
	}

	.side.back {
		transform: translateZ(calc(var(--cube-size) / 2 * -1)) rotateY(180deg);

		&.skew {
			transform: var(--back-skew);
		}

		.square {
			background: transparent;
		}
	}

	.side.right {
		transform: rotateY(-270deg) translateX(calc(var(--cube-size) / 2));
		transform-origin: top right;

		&.skew {
			transform: var(--right-skew);
		}

		.square {
			background: transparent;
		}
	}

	.side.left {
		transform: rotateY(270deg) translateX(calc(var(--cube-size) / 2 * -1));
		transform-origin: center left;

		&.skew {
			transform: var(--left-skew);
		}

		.square {
			background: transparent;
		}
	}

	.side.top {
		transform: rotateX(-90deg) translateY(calc(var(--cube-size) / 2 * -1));
		transform-origin: top center;

		&.skew {
			transform: var(--top-skew);
		}

		.square {
			background: transparent;
		}
	}

	.side.bottom {
		transform: rotateX(90deg) translateY(calc(var(--cube-size) / 2));
		transform-origin: bottom center;

		&.skew {
			transform: var(--bottom-skew);
		}

		.square {
			background: transparent;
		}
	}

	.side.front {
		transform: translateZ(calc(var(--cube-size) / 2));

		&.skew {
			transform: var(--front-skew);
		}

		.square {
			background: transparent;
		}
	}
}

.cube-wrapper.colors {
	.side {
		background: var(--dark);
	}

	.side.back {
		transform: translateZ(calc(var(--cube-size) / 2 * -1)) rotateY(180deg);

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}

	.side.right {
		transform: rotateY(-270deg) translateX(var(--cube-size) / 2);
		transform-origin: top right;

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}

	.side.left {
		transform: rotateY(270deg) translateX(calc(var(--cube-size) / 2 * -1));
		transform-origin: center left;

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}

	.side.top {
		transform: rotateX(-90deg) translateY(calc(var(--cube-size) / 2 * -1));
		transform-origin: top center;

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}

	.side.bottom {
		transform: rotateX(90deg) translateY(var(--cube-size) / 2);
		transform-origin: bottom center;

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}

	.side.front {
		transform: translateZ(var(--cube-size) / 2);

		.square {
			@for $i from 1 through 9 {
				&:nth-child(#{$i}) {
					// background: nth(var(--cube-colors, random(length(var(--cube-colors)))));
				}
			}
		}
	}
}

.cube-wrapper.large {
	padding-top: 20vh;
	width: var(--cube-size-lg);

	.side {
		width: var(--cube-size-lg);
		height: var(--cube-size-lg);
	}

	.side.back {
		transform: translateZ(calc(var(--cube-size-lg) / 2 * -1)) rotateY(180deg);
	}

	.side.right {
		transform: rotateY(-270deg) translateX(calc(var(--cube-size-lg) / 2));
	}

	.side.left {
		transform: rotateY(270deg) translateX(calc(var(--cube-size-lg) / 2 * -1));
	}

	.side.top {
		transform: rotateX(-90deg) translateY(calc(var(--cube-size-lg) / 2 * -1));
	}

	.side.bottom {
		transform: rotateX(90deg) translateY(calc(var(--cube-size-lg) / 2));
	}

	.side.front {
		transform: translateZ(var(--cube-size-lg) / 2);
	}

	.square {
		// subtle shadow around the edge of each square
		box-shadow: var(--cube-square-box-shadow-lg);
		border: var(--cube-square-border-lg);
		border-radius: var(--cube-square-border-radius-lg);
	}
}
