{"version":3,"sources":["src/js/theme.js","src/js/index.js"],"names":["ThemeManager","dark","gray","light","darkblue","yellow","tan","ice","lightTan","red","pink","orange","green","papayawhip","COLORS","THEMES","background","color","linkColor","randomIntFromInterval","min","max","Math","floor","random","$","selector","document","querySelectorAll","trigger","querySelector","setTheme","bind","handleUpdate","currentIndex","addEventListener","removeEventListener","nextRandInt","length","nextTheme","theme","body","paragraphs","links","icons","style","forEach","link","paragraph","icon","fill","n","now","hours","Date","getHours","numThemes","themeManager","setInitialTheme","listen"],"mappings":"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","file":"js.48dec4c9.js","sourceRoot":"..","sourcesContent":["const dark = \"#111\"\nconst gray = \"#888888\"\nconst light = \"#fefefe\"\nconst darkblue = \"#002573\"\nconst yellow = \"#f7d708\"\nconst tan = \"#FFDBB5\"\nconst ice = \"#F1FAEE\"\nconst lightTan = \"floralwhite\"\nconst red = \"#B80C09\"\nconst pink = \"#FF8484\"\nconst orange = \"orange\"\nconst green = \"green\"\nconst papayawhip = \"papayawhip\"\n\nconst COLORS = {\n\tdark: dark,\n\tgray: gray,\n\tlight: light,\n\tgreen: green,\n\tyellow: yellow,\n\tred: red,\n\tpink: pink,\n\torange: orange,\n\tdarkblue: darkblue,\n\ttan: tan,\n\tice: ice,\n\tpapayawhip: papayawhip\n}\n\nconst THEMES = [\n\t{ background: dark, color: light, linkColor: light },\n\t{ background: light, color: dark, linkColor: dark },\n\t{ background: darkblue, color: light, linkColor: light },\n\t{ background: green, color: light, linkColor: light },\n\t{ background: ice, color: dark, linkColor: dark },\n\t{ background: pink, color: light, linkColor: light },\n\t{ background: red, color: light, linkColor: light },\n\t{ background: tan, color: dark, linkColor: dark },\n\t{ background: yellow, color: dark, linkColor: dark },\n\t{ background: papayawhip, color: dark, linkColor: dark },\n\t{ background: orange, color: dark, linkColor: dark }\n]\n\nconst randomIntFromInterval = (min, max) => {\n\treturn Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nconst $ = selector => {\n\treturn [...document.querySelectorAll(selector)]\n}\n\nclass ThemeManager {\n\tconstructor() {\n\t\tthis.trigger = document.querySelector(\"#secret-button\")\n\t\tthis.setTheme = this.setTheme.bind(this)\n\t\tthis.handleUpdate = this.handleUpdate.bind(this)\n\t\tthis.currentIndex = 0\n\t}\n\n\tlisten() {\n\t\tthis.trigger.addEventListener(\"click\", this.handleUpdate)\n\t}\n\n\tunlisten() {\n\t\tthis.trigger.removeEventListener(\"click\", this.handleUpdate)\n\t}\n\n\thandleUpdate() {\n\t\t// get a random themes\n\t\tlet nextRandInt = null\n\t\tdo {\n\t\t\tnextRandInt = randomIntFromInterval(0, THEMES.length - 1)\n\t\t} while (nextRandInt === this.currentIndex)\n\t\tconst nextTheme = THEMES[nextRandInt]\n\n\t\t// set next theme\n\t\tthis.setTheme(nextTheme)\n\t\tthis.currentIndex = nextRandInt\n\t}\n\n\tsetTheme(theme) {\n\t\tconst { background, color, linkColor } = theme\n\n\t\t// get target elements\n\t\tconst body = document.querySelector(\"body\")\n\t\tconst paragraphs = $(\"p\")\n\t\tconst links = $(\"a\")\n\t\tconst icons = $(\"svg\")\n\n\t\t// apply styles\n\t\tbody.style.background = background\n\t\tbody.style.color = color\n\t\tlinks.forEach(link => (link.style.color = linkColor))\n\t\tparagraphs.forEach(paragraph => (paragraph.style.color = color))\n\t\ticons.forEach(icon => (icon.style.fill = color))\n\t}\n\n\tsetInitialTheme() {\n\t\t// set initial theme based on time of day (sort of)\n\t\tconst now = new Date()\n\t\tconst hours = now.getHours()\n\t\tconst numThemes = THEMES.length\n\t\t// if hours is greater than number of themes, keep wrapping around the list\n\t\tlet n = hours\n\t\twhile (n >= numThemes) {\n\t\t\tn = n - numThemes\n\t\t}\n\n\t\tif (hours > 17) {\n\t\t\tthis.setTheme(THEMES[0])\n\t\t} else {\n\t\t\tthis.setTheme(THEMES[1])\n\t\t}\n\n\t\t// this.setTheme(THEMES[n])\n\t\t// this.setTheme(THEMES[n])\n\t\tthis.currentIndex = n\n\t}\n}\nexport default ThemeManager\n","/**\n * Main app entry\n */\n\n/* Import styles */\nimport styles from \"../scss/styles.scss\"\n\n/* Import theme JS */\nimport ThemeManager from \"./theme\"\n\n/**\n * When the document is ready, begin any initialization that\n * needs to take place\n */\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst themeManager = new ThemeManager()\n\tthemeManager.setInitialTheme()\n\tthemeManager.listen()\n})\n"]}